{"version":3,"sources":["Components/Section/Section.jsx","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","type","onClick","Notification","message","App","state","countTotalFeedback","push","reduce","el","countPositiveFeedbackPercentage","Math","round","handleFeedback","e","target","currentTarget","dataset","action","setState","prevState","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAWeA,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCQQC,MAZf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCSSC,MAhBf,YAA+C,IAApBC,EAAmB,EAAnBA,gBACzB,OACE,gCACE,wBAAQC,KAAK,SAAS,cAAY,OAAOC,QAASF,EAAlD,kBAGA,wBAAQC,KAAK,SAAS,cAAY,UAAUC,QAASF,EAArD,qBAGA,wBAAQC,KAAK,SAAS,cAAY,MAAMC,QAASF,EAAjD,qBCLSG,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCGQC,E,4MACnBC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPW,mBAAqB,WACnB,MAA+B,EAAKD,MAA5BZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQ,GAEd,OADAA,EAAMW,KAAKd,EAAMC,EAASC,GACnBC,EAAMY,QAAO,SAACZ,EAAOa,GAAR,OAAeb,EAAQa,IAAI,I,EAGjDC,gCAAkC,WAChC,IAAQjB,EAAS,EAAKY,MAAdZ,KACFG,EAAQ,EAAKU,qBACnB,OAAOK,KAAKC,MAAOnB,EAAOG,EAAS,M,EAGrCiB,eAAiB,SAAAC,GACf,IAAMC,EAASD,EAAEE,cAAcC,QAAQC,OACvC,EAAKC,UAAS,SAAAC,GAAS,sBACpBL,EAASK,EAAUL,GAAU,O,4CAIlC,WACE,MAA+BM,KAAKhB,MAA5BZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,eAAC,EAAD,CAASL,MAAM,wBAAf,UACE,cAAC,EAAD,CAAiBS,gBAAiBsB,KAAKR,iBAEvC,gCACE,4CACCpB,EAAO,GAAKC,EAAU,GAAKC,EAAM,EAChC,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,KAAKf,qBACZT,mBAAoBwB,KAAKX,oCAG3B,cAAC,EAAD,CAAcP,QAAQ,gC,GA3CDmB,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b1e0278a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Section({ title, children }) {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from 'react';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}% </p>\n    </>\n  );\n}\n\nexport default Statistics;\n","import React from 'react';\n\nfunction FeedbackOptions({ onLeaveFeedback }) {\n  return (\n    <div>\n      <button type=\"button\" data-action=\"good\" onClick={onLeaveFeedback}>\n        Good\n      </button>\n      <button type=\"button\" data-action=\"neutral\" onClick={onLeaveFeedback}>\n        Neutral\n      </button>\n      <button type=\"button\" data-action=\"bad\" onClick={onLeaveFeedback}>\n        Bad\n      </button>\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Section from './Components/Section/Section';\nimport Statistics from './Components/Statistics/Statistics';\nimport FeedbackOptions from './Components/FeedbackOptions/FeedbackOptions';\nimport Notification from './Components/Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const total = [];\n    total.push(good, neutral, bad);\n    return total.reduce((total, el) => total + el, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return Math.round((good / total) * 100);\n  };\n\n  handleFeedback = e => {\n    const target = e.currentTarget.dataset.action;\n    this.setState(prevState => ({\n      [target]: prevState[target] + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions onLeaveFeedback={this.handleFeedback} />\n\n        <div>\n          <h2>Statistics</h2>\n          {good > 0 || neutral > 0 || bad > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </div>\n      </Section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}